apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: tpc-stack-builder
  title: The Palace Company Golden Path
  description: "Plantilla estandarizada que define repositorios y configuraciones para crear proyectos por mercado (Ventas, Club, Operaciones) con soporte para Vue, Serverless, ECS y EKS üöÄ"
  tags:
    - tpc
    - golden-path
    - frontend
    - backend
    - vue
    - serverless
    - ecs
    - microservice
    - kubernetes
    - eks
    - k8s
spec:
  owner: user:guest
  type: service

  parameters:
    # üß≠ PANTALLA DE INTRODUCCI√ìN
    - title: Introducci√≥n
      description: |
        Esta plantilla te ayudar√° a crear un repositorio estandarizado seg√∫n el tipo de arquitectura y mercado.

        ---
        **¬øQu√© hace esta plantilla?**
        - Crea autom√°ticamente un repositorio con la convenci√≥n:  
          `{Mercado}.{Producto}.{Tipo}.{Proyecto}`
        - Aplica la estructura base (Vue, Serverless, ECS o Microservice)
        - Registra el repositorio en el cat√°logo de Backstage
        - Env√≠a los metadatos al sistema de control interno (MongoDB)
        - Crea autom√°ticamente un ticket en Jira para la gesti√≥n de infraestructura

        ---
        **Instrucciones:**
        1. Revisa esta introducci√≥n.
        2. En el siguiente paso selecciona la arquitectura.
        3. Completa la informaci√≥n del proyecto y colaboradores.
        4. Confirma para generar el repositorio autom√°ticamente.
      properties: {}

    # üß© PANTALLA DE ARQUITECTURA
    - title: Selecci√≥n de arquitectura
      description: |
        Selecciona el tipo de arquitectura seg√∫n la necesidad del proyecto.

        ### ¬øQu√© significa cada tipo de arquitectura?
        - **Vue:** Frontend est√°tico desplegado en S3 + CloudFront (ideal para aplicaciones web p√∫blicas, sin backend propio).
        - **Serverless:** Backend con AWS Lambda y API Gateway (funciones bajo demanda, sin servidores dedicados, escalado autom√°tico).
        - **ECS:** Contenedor Docker desplegado en Amazon ECS (orquestaci√≥n de contenedores, √∫til para microservicios y cargas persistentes).
        - **Microservice (EKS):** Microservicio en Kubernetes (EKS), recomendado para arquitecturas empresariales escalables y robustas.
      required:
        - repoType
      properties:
        repoType:
          title: Tipo de arquitectura
          type: string
          enum:
            - Vue
            - Serverless
            - ECS
            - Microservice
          enumNames:
            - Vue (S3 + Cloudfront)
            - Serverless (AWS Lambda)
            - ECS (Contenedor para ECS)
            - Kubernetes (Microservicio para EKS)
          default: Microservice

    # üè¢ PANTALLA DE MERCADO, PRODUCTO Y REPOSITORIO
    - title: Configuraci√≥n del mercado, producto y repositorio
      description: |
        Selecciona el mercado, producto y completa los datos del proyecto.  
        El nombre del repositorio se generar√° autom√°ticamente con la convenci√≥n: `{Mercado}.{Producto}.{Tipo}.{Proyecto}`
      required:
        - market
        - product
        - repoDescription
        - projectName
        - techLead
      properties:
        market:
          title: Mercado
          type: string
          enum:
            - Ventas
            - Club
            - Operaciones
        product:
          title: Producto
          type: string
        projectName:
          title: Nombre del proyecto
          type: string
        repoDescription:
          title: Descripci√≥n del repositorio
          type: string
          ui:widget: textarea
          ui:options:
            rows: 1
        techLead:
          title: Tech Lead
          type: string
        collaborators:
          title: Colaboradores üßëüèª‚Äçüíª
          type: array
          items:
            type: object
            properties:
              user:
                type: string
                title: Usuario de GitHub
              access:
                type: string
                title: Tipo de permiso
                enum:
                  - pull
                  - push
                default: push
            required:
              - user
              - access

      dependencies:
        market:
          oneOf:
            - properties:
                market:
                  const: Ventas
                product:
                  title: Producto (Ventas)
                  type: string
                  enum:
                    - BE
                    - GS
                    - MVG
                    - SC
                    - Revenue
                    - Rates
                    - Restrictions
                    - Hubspot
                  enumNames:
                    - BE (Booking Engine)
                    - GS (Global Sales)
                    - MVG (Moon Vacation Gateway)
                    - SC (Sales Center)
                    - Revenue
                    - Rates
                    - Restrictions
                    - Hubspot
              required:
                - product
            - properties:
                market:
                  const: Club
                product:
                  title: Producto (Club)
                  type: string
                  enum:
                    - Postventa
                    - Preventa
                    - CallCenter
                    - PalaceElite
                    - Contabilidad
                    - Finanzas
                    - Comisiones
                  enumNames:
                    - Postventa
                    - Preventa
                    - Call Center
                    - Palace Elite
                    - Contabilidad
                    - Finanzas
                    - Comisiones
              required:
                - product
            - properties:
                market:
                  const: Operaciones
                product:
                  title: Producto (Operaciones)
                  type: string
                  enum:
                    - Payments
                    - Sistur
                    - ExperienciasDigitales
                    - Gastronomy
                  enumNames:
                    - Payments
                    - Sistur
                    - Experiencias Digitales
                    - Gastronomy
              required:
                - product

  steps:
    # Fetch content seg√∫n arquitectura
    - id: fetch-vue
      name: Fetch Vue Frontend Content
      action: fetch:template
      if: ${{ parameters.repoType === 'Vue' }}
      input:
        url: ./content/vue
        values:
          market: ${{ parameters.market }}
          product: ${{ parameters.product }}
          repoType: ${{ parameters.repoType }}
          repoName: ${{ parameters.market }}.${{ parameters.product }}.${{ parameters.repoType }}.${{ parameters.projectName }}
          projectName: ${{ parameters.projectName | lower }}
          techLead: ${{ parameters.techLead }}
          repoDescription: ${{ parameters.repoDescription }}
          collaborators: ${{ parameters.collaborators }}

    - id: fetch-serverless
      name: Fetch Serverless Content
      action: fetch:template
      if: ${{ parameters.repoType === 'Serverless' }}
      input:
        url: ./content/serverless
        values:
          market: ${{ parameters.market }}
          product: ${{ parameters.product }}
          repoType: ${{ parameters.repoType }}
          repoName: ${{ parameters.market }}.${{ parameters.product }}.${{ parameters.repoType }}.${{ parameters.projectName }}
          projectName: ${{ parameters.projectName | lower }}
          techLead: ${{ parameters.techLead }}
          repoDescription: ${{ parameters.repoDescription }}
          collaborators: ${{ parameters.collaborators }}

    - id: fetch-ecs
      name: Fetch ECS Container Content
      action: fetch:template
      if: ${{ parameters.repoType === 'ECS' }}
      input:
        url: ./content/ecs
        values:
          market: ${{ parameters.market }}
          product: ${{ parameters.product }}
          repoType: ${{ parameters.repoType }}
          repoName: ${{ parameters.market }}.${{ parameters.product }}.${{ parameters.repoType }}.${{ parameters.projectName }}
          projectName: ${{ parameters.projectName | lower }}
          techLead: ${{ parameters.techLead }}
          repoDescription: ${{ parameters.repoDescription }}
          collaborators: ${{ parameters.collaborators }}

    - id: fetch-microservice
      name: Fetch EKS Microservice Content
      action: fetch:template
      if: ${{ parameters.repoType === 'Microservice' }}
      input:
        url: ./content/eks
        values:
          market: ${{ parameters.market }}
          product: ${{ parameters.product }}
          repoType: ${{ parameters.repoType }}
          repoName: ${{ parameters.market }}.${{ parameters.product }}.${{ parameters.repoType }}.${{ parameters.projectName }}
          projectName: ms-${{ parameters.projectName | lower }}
          techLead: ${{ parameters.techLead }}
          repoDescription: ${{ parameters.repoDescription }}
          collaborators: ${{ parameters.collaborators }}

    # Publicar repo
    - id: publish
      name: Publish to GitHub
      action: publish:github
      input:
        description: ${{ parameters.repoDescription }}
        repoUrl: github.com?owner=the-palace-company&repo=${{ parameters.market }}.${{ parameters.product }}.${{ parameters.repoType }}.${{ parameters.projectName }}
        repoVisibility: internal
        defaultBranch: main
        protectDefaultBranch: false
        collaborators: ${{ parameters.collaborators }}
        topics:
          - ${{ parameters.repoType | lower }}
          - ${{ parameters.market | lower }}
          - ${{ parameters.product | lower }}
          - tpc
        repoVariables:
          PROJECT_NAME: ${{ parameters.projectName | lower }}

    # Registrar en cat√°logo
    - id: register
      name: Register in Backstage Catalog
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: "/catalog-info.yaml"
        optional: true

    # Trigger workflow compartido
    - id: trigger-shared-workflow
      name: Register data in MongoDB
      action: github:actions:dispatch
      input:
        repoUrl: github.com?owner=fanguas&repo=infra-nexus
        workflowId: register-repository.yaml
        branchOrTagName: main
        workflowInputs:
          repository: ${{ parameters.market }}.${{ parameters.product }}.${{ parameters.repoType }}.${{ parameters.projectName }}
          description: ${{ parameters.repoDescription }}
          tech_lead: ${{ parameters.techLead }}
          market: ${{ parameters.market }}
          product: ${{ parameters.product }}
          repo_type: ${{ parameters.repoType }}

    - id: create-jira-ticket
      name: Create Jira Ticket
      action: http:backstage:request
      input:
        method: POST
        path: "/proxy/jira/rest/api/3/issue"
        headers:
          content-type: "application/json"
        body:
          fields:
            summary: "Crear infraestructura para ${{ parameters.market }}.${{ parameters.product }}.${{ parameters.repoType }}.${{ parameters.projectName }}"
            description:
              type: doc
              version: 1
              content:
                - type: paragraph
                  content:
                    - type: text
                      text: |
                        Repositorio generado autom√°ticamente desde Backstage üöÄ

                        Se ha creado un nuevo repositorio en GitHub. Por favor proceder con la creaci√≥n de la infraestructura correspondiente.

                        Datos del proyecto:

                        Repositorio: ${{ steps.publish.output.remoteUrl }}
                        Descripci√≥n: ${{ parameters.repoDescription }}
                        TechLead: ${{ parameters.techLead }}
                        Mercado: ${{ parameters.market }}
                        Producto: ${{ parameters.product }}
                        Tipo: ${{ parameters.repoType }}
            project:
              key: SPR
            issuetype:
              name: Tarea
            assignee:
              id: "712020:111959b9-b3ac-4352-8c5d-c5e27fa8cd91"

    - id: set-jira-url
      name: Set Jira URL
      action: debug:log
      input:
        message: "https://palaceresorts.atlassian.net/browse/${{ steps['create-jira-ticket'].output.body.key }}"
      output:
        jiraUrl: "https://palaceresorts.atlassian.net/browse/${{ steps['create-jira-ticket'].output.body.key }}"

  output:
    links:
      - title: Repositorio
        icon: github
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Abrir en cat√°logo
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
      - title: Ticket en Jira
        icon: jira
        url: https://palaceresorts.atlassian.net/browse/${{ steps['create-jira-ticket'].output.body.key }}
